#!/usr/bin/env python3
"""
Test nh·∫≠n di·ªán h√¨nh ·∫£nh cho v.0.3
"""

import cv2
import numpy as np
import pyautogui
import os
import sys
import json
import argparse
from PIL import Image

def test_single_image(image_name, confidence=0.8):
    """Test nh·∫≠n di·ªán m·ªôt h√¨nh ·∫£nh c·ª• th·ªÉ"""
    print(f"üîç Test nh·∫≠n di·ªán: {image_name}")
    
    image_dir = "../image"
    image_path = os.path.join(image_dir, image_name)
    
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {image_name}")
        return False
        
    try:
        # ƒê·ªçc h√¨nh ·∫£nh m·∫´u
        template = cv2.imread(image_path)
        if template is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file: {image_name}")
            return False
        
        h, w = template.shape[:2]
        print(f"‚úÖ ƒê·ªçc file th√†nh c√¥ng: {w}x{h} pixels")
        
        # Ch·ª•p m√†n h√¨nh
        screenshot = pyautogui.screenshot()
        screenshot_cv = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        print(f"‚úÖ Ch·ª•p m√†n h√¨nh: {screenshot.size}")
        
        # Test nh·∫≠n di·ªán
        result = cv2.matchTemplate(screenshot_cv, template, cv2.TM_CCOEFF_NORMED)
        locations = np.where(result >= confidence)
        
        if len(locations[0]) > 0:
            count = len(locations[0])
            max_val = np.max(result)
            y, x = locations[0][0], locations[1][0]
            print(f"‚úÖ T√¨m th·∫•y {count} v·ªã tr√≠ kh·ªõp")
            print(f"   ƒê·ªô ch√≠nh x√°c t·ªëi ƒëa: {max_val:.3f}")
            print(f"   V·ªã tr√≠ t·ªët nh·∫•t: ({x}, {y})")
            return True
        else:
            max_val = np.max(result)
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y (ƒë·ªô ch√≠nh x√°c t·ªëi ƒëa: {max_val:.3f})")
            print(f"   Th·ª≠ gi·∫£m confidence xu·ªëng {max_val:.3f} ho·∫∑c th·∫•p h∆°n")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi test {image_name}: {e}")
        return False

def test_starfall_images():
    """Test t·∫•t c·∫£ h√¨nh ·∫£nh cho starfall mode"""
    print("=== Test Starfall Mode Images ===")
    
    required_images = ["ads.png", "Claim.png"]
    optional_images = ["starfall.png"]
    
    print(f"\nüîç Test h√¨nh ·∫£nh b·∫Øt bu·ªôc:")
    all_required_ok = True
    for img in required_images:
        success = test_single_image(img, confidence=0.7)
        if not success:
            all_required_ok = False
        print()
    
    print(f"üîç Test h√¨nh ·∫£nh t√πy ch·ªçn:")
    for img in optional_images:
        if os.path.exists(f"../image/{img}"):
            test_single_image(img, confidence=0.7)
        else:
            print(f"‚ö†Ô∏è  {img}: Kh√¥ng c√≥ (c√≥ th·ªÉ th√™m sau)")
        print()
    
    return all_required_ok

def test_normal_images():
    """Test t·∫•t c·∫£ h√¨nh ·∫£nh cho normal mode"""
    print("=== Test Normal Mode Images ===")
    
    normal_images = ["gold2.png", "gold.png", "coin.png", "Gems.png", "OK.png", "Claim.png"]
    
    all_ok = True
    for img in normal_images:
        success = test_single_image(img, confidence=0.8)
        if not success:
            all_ok = False
        print()
    
    return all_ok

def test_config_files():
    """Test c√°c file c·∫•u h√¨nh"""
    print("=== Test Config Files ===")
    
    config_dir = "../config"
    configs = ["normal_config.json", "starfall_config.json"]
    
    for config in configs:
        path = os.path.join(config_dir, config)
        print(f"\nüîç Test {config}:")
        if os.path.exists(path):
            try:
                with open(path, 'r') as f:
                    data = json.load(f)
                print(f"‚úÖ File h·ª£p l·ªá")
                print(f"   Mode: {data.get('mode', 'N/A')}")
                print(f"   Confidence: {data.get('confidence', 'N/A')}")
                print(f"   Ads wait: {data.get('ads_wait_time', 'N/A')} seconds")
                print(f"   Images: {len(data.get('images', []))} files")
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc file: {e}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file")

def main():
    parser = argparse.ArgumentParser(description='Test nh·∫≠n di·ªán h√¨nh ·∫£nh cho Auto Clicker v.0.3')
    parser.add_argument('--image', help='Test m·ªôt h√¨nh ·∫£nh c·ª• th·ªÉ')
    parser.add_argument('--confidence', type=float, default=0.8, help='ƒê·ªô ch√≠nh x√°c (0.0-1.0)')
    parser.add_argument('--mode', choices=['normal', 'starfall', 'all'], default='all', 
                       help='Test ch·∫ø ƒë·ªô c·ª• th·ªÉ')
    
    args = parser.parse_args()
    
    print("üîç Auto Clicker v.0.3 - Image Recognition Test")
    print("=" * 50)
    
    if args.image:
        # Test m·ªôt h√¨nh ·∫£nh c·ª• th·ªÉ
        test_single_image(args.image, args.confidence)
    else:
        # Test theo ch·∫ø ƒë·ªô
        if args.mode in ['all', 'normal']:
            normal_ok = test_normal_images()
            
        if args.mode in ['all', 'starfall']:
            starfall_ok = test_starfall_images()
        
        # Test config files
        test_config_files()
        
        print("\n" + "=" * 50)
        print("üìã T·ªïng k·∫øt:")
        if args.mode in ['all', 'normal']:
            print(f"Normal Mode: {'‚úÖ OK' if normal_ok else '‚ùå C√≥ l·ªói'}")
        if args.mode in ['all', 'starfall']:
            print(f"Starfall Mode: {'‚úÖ OK' if starfall_ok else '‚ùå C√≥ l·ªói'}")
        
        print("\nüí° G·ª£i √Ω:")
        print("- N·∫øu kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh, ki·ªÉm tra th∆∞ m·ª•c image/")
        print("- N·∫øu ƒë·ªô ch√≠nh x√°c th·∫•p, th·ª≠ gi·∫£m confidence trong config")
        print("- ƒê·∫£m b·∫£o game hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß tr√™n m√†n h√¨nh")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
        print("\nüí° ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t: pip install opencv-python pyautogui pillow numpy")
